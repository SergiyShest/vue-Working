@inherits System.Web.Mvc.WebViewPage
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>редактирование id=@ViewBag.Id</title>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <link rel="stylesheet" type="text/css" href="~/Content/vueError.css" />
    <script src="~/js/Vue/components/vueErrorAborder.js"></script>
    <script src="~/Scripts/vue-select.js"></script>
</head>
<body>
    <div id="app">
        <table>
            <tr>
                <td>Cтоимость перевозки</td>
                <td>
                    <error-aborder v-bind:error="errors.Freight">
                        <input type="number" v-model="order.Freight" class="input" />
                    </error-aborder>
                </td>
            </tr>
            <tr>
                <td>Старана приписки корабля</td>
                <td>
                    <select v-model="order.ShipCountry" class="input">
                        <option v-for="item in AvaialbeCountrys" :v-key="item">{{item}} </option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>Город корабля</td>
                <td >
                    <error-aborder v-bind:error="errors.ShipCity">
                        <select v-model="order.ShipCity" class="input">
                            <option v-for="city in AvaialbeCitys" :v-key="city">{{city}} </option>
                        </select>
                    </error-aborder>
                </td>
            </tr>
            <tr>
                <td>Адрес корабля</td>
                <td>
                    <error-aborder v-bind:error="errors.ShipAddress">
                        <input type="text" v-model="order.ShipAddress" class="input" />
                    </error-aborder>
                </td>
            </tr>
            <tr>
                <td> </td>
                <td>
                    <button v-on:click="Save()" :disabled="IsChanged===false || hasError " class="alignRight">Save</button>
                </td>
            </tr>
        </table>
    </div>
    <script>
        var abortController = new AbortController();
 var validationCounter = 0;
        new Vue({
            el: "#app",
            data: {
                id: @ViewBag.Id,
                order: {
                    OrderID: 0,
                    CustomerID: "",
                    EmployeeID: 0,
                    OrderDate: "",
                    RequiredDate: "",
                    ShippedDate: "",
                    ShipVia: 0,
                    Freight: 0,
                    ShipName: "",
                    ShipAddress: "",
                    ShipCity: "",
                    ShipRegion: null,
                    ShipPostalCode: "",
                    ShipCountry: ""
            },
                oldOrder: {
                ShipCountry: ""
            },
                errors: {
                OrderID: null,
                CustomerID: null,
                EmployeeID: null,
                OrderDate: null,
                RequiredDate: null,
                ShippedDate: null,
                ShipVia: null,
                Freight: null,
                ShipName: null,
                ShipAddress: null,
                ShipCity: null,
                ShipRegion: null,
                ShipPostalCode: null,
                ShipCountry: null
            },
                IsChanged: false,
                AvaialbeCitys: [],
                AvaialbeCountrys: []
            },
            computed :
            {
                hasError: function () {
                    for (var err in  this.errors) {
                        var error = this.errors[err];
                        if (error !== '' || null) return true;
                    }
                    return false;
                }
            },
            methods: {
                //читаем объект
                fetchOrder() {
                    var path = "../Orders/GetById?Id=" + this.id;
                    this.fetchJson(path, json => this.order = json);
                },
                fetchCityList() {
                    //город зависит от выбраной страны
                        var country = this.order.ShipCountry;
                        if (country == null || country === "") {
                            country = '';
                        }
                    var path = "../Orders/AvaiableCityList?country=" + country;
                    this.fetchJson(path, json => {this.AvaialbeCitys = json;});
                },
                fetchCountrys() {
                        var path = "../Orders/AvaiableCountrys";
                        this.fetchJson(path,jsonResult => {this.AvaialbeCountrys = jsonResult;});
                },
           Validate() {
                validationCounter++;//увеличиваю счетчик валидации, что бы предыдущая валидация не отработала
               var counter = validationCounter;//создаю копию переменнной
               var valFuction= this.ValidateX;//так как я не могу использовать this внутри setTimeout приходится создавать ссылку на функцию
                setTimeout(function () {valFuction(counter);},500);//вызываю валидацию с задержкой ()
            },
            ValidateX(сounter) {
                if (validationCounter !== сounter)//если счетчик валидаций изменился за время задержки валидации, то эту валидацию надо прервать
                {
                    return;
                }
                console.log("Validate");
                    abortController.abort();//прервать предыдущую валидацию если она успела начаться
                    abortController = new AbortController();//создаю новый контроллер валидации
                    this.Action("Validate",abortController.signal);//перадаю сигнал позволяющий "убить" ПРЕДЫДУЩИЙ фетч
            },
                Save() {
                abortController.abort();//прервать предыдущую валидацию
                this.Action("Save");
            },
                Action(action,signal) {
                var myJSON = JSON.stringify(this.order);
                var path = "../Orders/" + action + "?id=" + this.id + "&json=" + myJSON;
                this.fetchJson(path, jsonResult => {
                    this.errors = jsonResult.Errors;
                    this.IsChanged = jsonResult.IsChanged;
               },signal);
            },
                fetchJson(path, collback,signal) {
                    try {
                        fetch(path, { mode: 'cors',signal:signal })
                            .then(response => response.json())
                            .then(function(json) { collback(json); }
                            );
                    } catch (ex) {
                        alert(ex);
                    }
                },
                saveOldOrderValue:function(){
                  this.oldOrder.ShipCountry = this.order.ShipCountry;
                }
            },
            watch: {
                order: {
                    handler: function (after) {
                        if (this.oldOrder.ShipCountry !== after.ShipCountry)//Только если изменилась страна
                        {
                            this.fetchCityList();//Перечитываю список городов с учетом выбранной страны
                        }
                     this.saveOldOrderValue();
                     this.Validate();
                     },
                    deep: true
                }
            },
            mounted: function () {
            this.fetchCountrys();//начитываю список стран
            //начитывать список городов здесь излишне, он начитается когда начитается объект
            this.fetchOrder();//читаю объект
            this.saveOldOrderValue();//запоминаю старое значение
            }
        });
    </script>
</body>
</html>
